#include <iostream>
#include <memory>

class Clown
{
public:
	Clown() { std::cout << this <<  " Clown constructor" << std::endl; }
	~Clown() { std::cout << this << " Clown destructor" << std::endl; }

	void f() { std::cout << "function of class" << std::endl; }
};

void unique_ptr_realese_memory()
{
	std::unique_ptr<Clown> u_ptr(new Clown);
	u_ptr->f();
}

void unique_ptr_move()
{
	std::cout << "передача владения ресурса памяти в другой указатель" << std::endl;
	std::unique_ptr<Clown> u_ptr(new Clown);
	auto u_ptr_new = std::move(u_ptr);
}

std::unique_ptr<int> int_unique_ptr()
{
	std::cout << "Выделение памяти" << std::endl;
	std::unique_ptr<int> ui_ptr(new int(10));
	std::cout << ui_ptr << std::endl;
	return ui_ptr;
}

void unique_ptr_return()
{
	std::cout << "Совместное владение" << std::endl;
	std::unique_ptr<int> u_ptr = int_unique_ptr();
}

void free_memory()
{
	std::cout << "Освобождение памяти" << std::endl;
	int_unique_ptr();
}


void make_uniq()
{
	std::cout << "Уникальный указатель" << std::endl;
	std::unique_ptr<Clown> mptr = std::make_unique<Clown>();
}


int main()
{
	setlocale(LC_ALL, "rus");
	unique_ptr_realese_memory();
	unique_ptr_move();
	int_unique_ptr();
	unique_ptr_return();
	free_memory();
	make_uniq();
}
